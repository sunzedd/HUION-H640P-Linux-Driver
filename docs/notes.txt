Вывести информацию о всех устройствах ввода, подключенных к системе можно
с помощью ВФС proc:

        cat /proc/bus/input/devices

Для подключенного графического планшета huion выводятся следующие записи:

I: Bus=0003 Vendor=256c Product=006d Version=0111
N: Name="HID 256c:006d Pen"
P: Phys=usb-0000:00:14.0-9/input0
S: Sysfs=/devices/pci0000:00/0000:00:14.0/usb1/1-9/1-9:1.0/0003:256C:006D.0003/input/input26
U: Uniq=
H: Handlers=mouse4 event20 //!!!!!!!!!!!!!!!!!!!!!!11
B: PROP=2
B: EV=1b
B: KEY=1c01 0 0 0 0 0
B: ABS=1000003
B: MSC=10

cat /dev/input/mouse4:
    Реагирует на перемещение стилуса по планшету (в том числе и над планшетом).
cat /dev/input/event20:
    Как и mouse4, но паттерн вывода отличается


I: Bus=0003 Vendor=256c Product=006d Version=0111
N: Name="HID 256c:006d Pad"
P: Phys=usb-0000:00:14.0-9/input0
S: Sysfs=/devices/pci0000:00/0000:00:14.0/usb1/1-9/1-9:1.0/0003:256C:006D.0003/input/input27
U: Uniq=
H: Handlers=event21 js0 //!!!!!!!!!!!!!!!!!!!
B: PROP=0
B: EV=1b
B: KEY=800 30000000003ff 0 0 0 0
B: ABS=3
B: MSC=10

cat /dev/input/event21:
    Реагирует только на нажатие всех 6 кнопок на планшете.
cat /dev/input/js0:
    Реагирует на нажатие 6 кнопок на планшете, но с другим паттерном.
    Также реагирует на нажатие одной кнопки на стилусе.
    
    
lsusb -v Выводит информацию о всех юсб устройствах.
Для планшета имеется следующий вывод:

...
bNumConfigurations:	1
Configuration Descriptor:
	...
	bNumInterfaces:	2 		!!!
	
	Interface Descriptor:
		...
		bNumEndpoints:		1
		...
		bInterfaceNumber: 	0
		bInterfaceClass: 	1 Human Interface Device
		bInterfaceProtocol:	2 Mouse
		iInterface: 		0
    		
    		...
    		    HID Device Descriptor
    		...
    		
    		Endpoint Descriptor:
    			bLength:		7
    			bEndpointAddress:	0x81 EP 1 IN
    			bmAttributes:		3
    				Transfer Type:		Interrupt
    				Synch Type:		None
    				Usage Type:		Data
    			wMaxPacketSize:	0x0040 1x 64 bytes
    			bInterval:		2
    			
    			
    	Interface Descriptor:
    		bNumEndpoints:		1
    		bInterfaceClass: 	1 Human Interface Device
		bInterfaceProtocol:	2 Mouse
		
    		...
    		    HID Device Descriptor
    		...
    		
    		Endpoint Descriptor:		
    			bLength:		7
    			bEndpointAddress:	0x82 EP 2 IN
    			bmAttributes:		3
    				Transfer Type:		Interrupt
    				Synch Type:		None
    				Usage Type:		Data
    			wMaxPacketSize:	0x0010 1x 16 bytes
    			bInterval:		2
    			
!!!
Напомним, что в обратных вызовах probe и disconnect, которые выполняются
ядром USB для каждого интерфейса зарегистрированного устройства, в
качестве первого параметра указывается дескриптор соответствующего интерфейса.

int (*probe)(struct usb_interface *interface, const struct usb_device_id *id);
void (*disconnect)(struct usb_interface *interface);

	Оба интерфейса имеют по одному endpoint-у, настроенных в режиме IN (Действительно,
планшет - это устройство ввода и выводить данные с машины на него звучит 
бессмысленно).
	Нужно опредеделить, какой интерфейс устройства является интерфейсом планшета,
а какой - стилуса. В lsusb -v они оба работают по протоколу мыши. У них различаются
размер пакета и размер дескриптора HID-устройства.

	Судя по заметке о выводе содержимого  /proc, первый интерфейс - это стилус (Pen),
второй интерфейс - планшет (Pad).

	Использование символьных драйверов осуществляется через соответствующие файлы 
символьных устройств, которые прикомпонованы к виртуальной файловой системе (VFS). 
Это означает, что приложение выполняет обычные файловые операции с файлом 
символьного устройства. Эти операции будут перетранслированы виртуальной файловой 
системой VFS в соответствующие функции в прикомпонованном драйвере символьного устройства. 
Затем для того, чтобы получить нужные результаты, с помощью этих функций 
осуществляется окончательный низкоуровневый доступ к реальному устройству.
    
	Приложение подключается к файлу устройства при помощи системного вызова open, открывающего файл устройства.

	Файлы устройств подключаются к драйверу устройства с помощью специального 
механизма регистрации, что осуществляется драйвером. Драйвер связывается с устройством 
с помощью специальных низкоуровневых операций, характерных для конкретного устройства.
Таким образом, мы формируем полное соединение.

	При подключении приложения к файлу устройства используется имя файла устройства.
Но при подключении файла устройства к драйверу устройства используется номер файла
устройства, а не имя файла. используют пару чисел <major, minor>.

	С помощью следующей команды можно будет выдать список файлов различных символьных 
устройств, имеющихся в вашей системе:
$ ls -l /dev/ | grep "^c"
c - character.

	struct usb_device представляет физическое USB устройство,
	struct usb_interface представляет конкретный интерфейс этого устройства.
	Эти структуры представляются в sysfs как отдельные устройства, так как они 
содержат struct device.

---------------------------- URB ----------------------------------------------
struct urb: inlude/linux/usb.h

urb используется для отправки и получения данных в/с конкретного endpoint конкретного
устройства в ассинхронной манере.
	Драйвер usb устройства может аллоцировать несколько urb для одного endpoint-а,
либо один urb на несколько endpoint-ов. Каждый endpoint может обрабатывать очередь
из urb. Urb могут быть отменены драйвером, в случае если устройство было отключено.

	usb_fill_int_urb is a helper function to properly initialize a urb to be
sent to a interrupt endpoint of a USB device:
	
	void usb_fill_int_urb(struct urb *urb, struct usb_device *dev,
						  unsigned int pipe, void *transfer_buffer,
						  int buffer_length, usb_complete_t complete,
						  void *context, int interval);

    int interval - The interval at which that this urb should be scheduled.
В нашем случае - 2 милисекунды.


	However EV_ABS requires a little special care. Before calling input_register_device,
you have to fill additional fields in the input_dev struct for each absolute
axis your device has. If our button device had also the ABS_X axis:

button_dev.absmin[ABS_X] = 0;
button_dev.absmax[ABS_X] = 255;
button_dev.absfuzz[ABS_X] = 4;
button_dev.absflat[ABS_X] = 8;

Or, you can just say:

input_set_abs_params(button_dev, ABS_X, 0, 255, 4, 8);

	This setting would be appropriate for a joystick X axis, with the minimum of 0,
maximum of 255 (which the joystick must be able to reach, no problem if it
sometimes reports more, but it must be able to always reach the min and max values),
with noise in the data up to +- 4, and with a center flat position of size 8.
    
// -------------------------------EVTEST UTILITY----------------------------------------

Отчет мыши:

Event: time, -------------- SYN_REPORT ------------
Event: time, type 4 (EV_MSC), code 4 (MSC_SCAN), value 90001
Event: time, type 1 (EV_KEY), code 272 (BTN_LEFT), value 1

Event: time, -------------- SYN_REPORT ------------
Event: time, type 4 (EV_MSC), code 4 (MSC_SCAN), value 90001
Event: time, type 1 (EV_KEY), code 272 (BTN_LEFT), value 0

Между двумя этими событиями левая кнопка мыши находится в зажатом положении,
события не посылаются.



Отчет клавиатуры:

Event: time , -------------- SYN_REPORT ------------
Event: time , type 4 (EV_MSC), code 4 (MSC_SCAN), value 70014
Event: time , type 1 (EV_KEY), code 16 (KEY_Q), value 1
Event: time , -------------- SYN_REPORT ------------
qEvent: time, type 1 (EV_KEY), code 16 (KEY_Q), value 2
Event: time , -------------- SYN_REPORT ------------
Event: time , type 1 (EV_KEY), code 16 (KEY_Q), value 2
Event: time , -------------- SYN_REPORT ------------
Event: time , type 1 (EV_KEY), code 16 (KEY_Q), value 2
Event: time , -------------- SYN_REPORT ------------
Event: time , type 1 (EV_KEY), code 16 (KEY_Q), value 2
Event: time , -------------- SYN_REPORT ------------
Event: time , type 1 (EV_KEY), code 16 (KEY_Q), value 2
Event: time , -------------- SYN_REPORT ------------
Event: time , type 1 (EV_KEY), code 16 (KEY_Q), value 2
Event: time , -------------- SYN_REPORT ------------
qEvent: time, type 1 (EV_KEY), code 16 (KEY_Q), value 2
Event: time , -------------- SYN_REPORT ------------
qEvent: time, type 1 (EV_KEY), code 16 (KEY_Q), value 2
Event: time , -------------- SYN_REPORT ------------
qEvent: time, type 4 (EV_MSC), code 4 (MSC_SCAN), value 70014
Event: time , type 1 (EV_KEY), code 16 (KEY_Q), value 0


Тачпад:
	ТЕСТ КЕЙС №1:
		1. Палец касается тачпада
		2. Палец двигает курсор
		3. Палец убирается с тачпада.

		-------------- SYN_REPORT ------------
		Event: time, type 3 (EV_ABS), code 57 (ABS_MT_TRACKING_ID), value 24
		Event: time, type 3 (EV_ABS), code 53 (ABS_MT_POSITION_X), value 644
		Event: time, type 3 (EV_ABS), code 54 (ABS_MT_POSITION_Y), value 541
		Event: time, type 1 (EV_KEY), code 330 (BTN_TOUCH), value 1
		Event: time, type 1 (EV_KEY), code 325 (BTN_TOOL_FINGER), value 1
		Event: time, type 3 (EV_ABS), code 0 (ABS_X), value 644
		Event: time, type 3 (EV_ABS), code 1 (ABS_Y), value 541
		Event: time, type 4 (EV_MSC), code 5 (MSC_TIMESTAMP), value 0
		
		Event: time, -------------- SYN_REPORT ------------
		Event: time, type 4 (EV_MSC), code 5 (MSC_TIMESTAMP), value 7100
		Event: time, -------------- SYN_REPORT ------------
		Event: time, type 4 (EV_MSC), code 5 (MSC_TIMESTAMP), value 14200
		Event: time, -------------- SYN_REPORT ------------

					...			....			...			..	..	

		Event: time, -------------- SYN_REPORT ------------
		Event: time, type 4 (EV_MSC), code 5 (MSC_TIMESTAMP), value 49700

		Event: time, -------------- SYN_REPORT ------------
		Event: time, type 3 (EV_ABS), code 57 (ABS_MT_TRACKING_ID), value -1
		Event: time, type 1 (EV_KEY), code 330 (BTN_TOUCH), value 0
		Event: time, type 1 (EV_KEY), code 325 (BTN_TOOL_FINGER), value 0
		Event: time, type 4 (EV_MSC), code 5 (MSC_TIMESTAMP), value 56800


	ТЕСТ КЕЙС №2:
		1. Палец касается тачпада
		2. Палец кликает левую кнопку тачпада
		3. Палец убирается с тачпада.

		Event: time, type 3 (EV_ABS), code 57 (ABS_MT_TRACKING_ID), value 61
		Event: time, type 3 (EV_ABS), code 53 (ABS_MT_POSITION_X), value 313
		Event: time, type 3 (EV_ABS), code 54 (ABS_MT_POSITION_Y), value 576
		Event: time, type 1 (EV_KEY), code 330 (BTN_TOUCH), value 1
		Event: time, type 1 (EV_KEY), code 325 (BTN_TOOL_FINGER), value 1
		Event: time, type 3 (EV_ABS), code 0 (ABS_X), value 313
		Event: time, type 3 (EV_ABS), code 1 (ABS_Y), value 576
		Event: time, type 4 (EV_MSC), code 5 (MSC_TIMESTAMP), value 0

		Event: time, -------------- SYN_REPORT ------------
		Event: time, type 4 (EV_MSC), code 5 (MSC_TIMESTAMP), value 7100

		Event: time, -------------- SYN_REPORT ------------
		Event: time, type 4 (EV_MSC), code 5 (MSC_TIMESTAMP), value 14200

				...					...			...
		
		Event: time, -------------- SYN_REPORT ------------
		Event: time, type 4 (EV_MSC), code 5 (MSC_TIMESTAMP), value 92300
		
		Event: time, -------------- SYN_REPORT ------------
		Event: time, type 3 (EV_ABS), code 54 (ABS_MT_POSITION_Y), value 575
		Event: time, type 3 (EV_ABS), code 1 (ABS_Y), value 575
		Event: time, type 4 (EV_MSC), code 5 (MSC_TIMESTAMP), value 99400
		
		Event: time, -------------- SYN_REPORT ------------
		Event: time, type 3 (EV_ABS), code 53 (ABS_MT_POSITION_X), value 314
		Event: time, type 3 (EV_ABS), code 0 (ABS_X), value 314
		Event: time, type 4 (EV_MSC), code 5 (MSC_TIMESTAMP), value 113600
		
		Event: time, -------------- SYN_REPORT ------------
		Event: time, type 1 (EV_KEY), code 272 (BTN_LEFT), value 0
		Event: time, type 4 (EV_MSC), code 5 (MSC_TIMESTAMP), value 127800
		
		Event: time, -------------- SYN_REPORT ------------
		Event: time, type 4 (EV_MSC), code 5 (MSC_TIMESTAMP), value 134900
		
		Event: time, -------------- SYN_REPORT ------------
		Event: time, type 4 (EV_MSC), code 5 (MSC_TIMESTAMP), value 142000
		
		Event: time, -------------- SYN_REPORT ------------
		Event: time, type 3 (EV_ABS), code 57 (ABS_MT_TRACKING_ID), value -1
		Event: time, type 1 (EV_KEY), code 330 (BTN_TOUCH), value 0
		Event: time, type 1 (EV_KEY), code 325 (BTN_TOOL_FINGER), value 0
		Event: time, type 4 (EV_MSC), code 5 (MSC_TIMESTAMP), value 149100



	ТЕСТ КЕЙС №3:
		1. Палец касается тачпада
		2. Палец кликает левую кнопку тачпада
		3. Палец производит свайп (слайд) по поверхности тачпада.
		4. Палец убирается с тачпада.


		 type 3 (EV_ABS), code 57 (ABS_MT_TRACKING_ID), value 78
		 type 3 (EV_ABS), code 53 (ABS_MT_POSITION_X), value 316
		 type 3 (EV_ABS), code 54 (ABS_MT_POSITION_Y), value 549
		 type 1 (EV_KEY), code 330 (BTN_TOUCH), value 1
		 type 1 (EV_KEY), code 325 (BTN_TOOL_FINGER), value 1
		 type 3 (EV_ABS), code 0 (ABS_X), value 316
		 type 3 (EV_ABS), code 1 (ABS_Y), value 549
		 type 4 (EV_MSC), code 5 (MSC_TIMESTAMP), value 0

		 -------------- SYN_REPORT ------------
		 type 4 (EV_MSC), code 5 (MSC_TIMESTAMP), value 7100
		 -------------- SYN_REPORT ------------
		 type 4 (EV_MSC), code 5 (MSC_TIMESTAMP), value 14200
		 -------------- SYN_REPORT ------------
		 type 4 (EV_MSC), code 5 (MSC_TIMESTAMP), value 21300
		 -------------- SYN_REPORT ------------
		 type 1 (EV_KEY), code 272 (BTN_LEFT), value 1
		 type 4 (EV_MSC), code 5 (MSC_TIMESTAMP), value 28400
		 -------------- SYN_REPORT ------------
		 type 4 (EV_MSC), code 5 (MSC_TIMESTAMP), value 35500
		 -------------- SYN_REPORT ------------
		 type 4 (EV_MSC), code 5 (MSC_TIMESTAMP), value 42600
		 -------------- SYN_REPORT ------------
		 type 4 (EV_MSC), code 5 (MSC_TIMESTAMP), value 49700
		 -------------- SYN_REPORT ------------
		 type 4 (EV_MSC), code 5 (MSC_TIMESTAMP), value 56800
		 -------------- SYN_REPORT ------------
		 type 4 (EV_MSC), code 5 (MSC_TIMESTAMP), value 63900

		 -------------- SYN_REPORT ------------
		 type 3 (EV_ABS), code 54 (ABS_MT_POSITION_Y), value 548
		 type 3 (EV_ABS), code 1 (ABS_Y), value 548
		 type 4 (EV_MSC), code 5 (MSC_TIMESTAMP), value 71000
		 -------------- SYN_REPORT ------------
		 type 3 (EV_ABS), code 53 (ABS_MT_POSITION_X), value 317
		 type 3 (EV_ABS), code 0 (ABS_X), value 317
		 type 4 (EV_MSC), code 5 (MSC_TIMESTAMP), value 78100
		 -------------- SYN_REPORT ------------
		 type 3 (EV_ABS), code 54 (ABS_MT_POSITION_Y), value 547
		 type 3 (EV_ABS), code 1 (ABS_Y), value 547
		 type 4 (EV_MSC), code 5 (MSC_TIMESTAMP), value 85200
		 -------------- SYN_REPORT ------------
		 type 3 (EV_ABS), code 53 (ABS_MT_POSITION_X), value 318
		 type 3 (EV_ABS), code 54 (ABS_MT_POSITION_Y), value 546
		 type 3 (EV_ABS), code 0 (ABS_X), value 318
		 type 3 (EV_ABS), code 1 (ABS_Y), value 546
		 type 4 (EV_MSC), code 5 (MSC_TIMESTAMP), value 92300
		 -------------- SYN_REPORT ------------
		 type 3 (EV_ABS), code 53 (ABS_MT_POSITION_X), value 319
		 type 3 (EV_ABS), code 54 (ABS_MT_POSITION_Y), value 545
		 type 3 (EV_ABS), code 0 (ABS_X), value 319
		 type 3 (EV_ABS), code 1 (ABS_Y), value 545
		 type 4 (EV_MSC), code 5 (MSC_TIMESTAMP), value 99400

		 -------------- SYN_REPORT ------------
		 type 3 (EV_ABS), code 53 (ABS_MT_POSITION_X), value 797
		 type 3 (EV_ABS), code 54 (ABS_MT_POSITION_Y), value 455
		 type 3 (EV_ABS), code 0 (ABS_X), value 797
		 type 3 (EV_ABS), code 1 (ABS_Y), value 455
		 type 4 (EV_MSC), code 5 (MSC_TIMESTAMP), value 298200
		 -------------- SYN_REPORT ------------
		 type 3 (EV_ABS), code 53 (ABS_MT_POSITION_X), value 804
		 type 3 (EV_ABS), code 54 (ABS_MT_POSITION_Y), value 454
		 type 3 (EV_ABS), code 0 (ABS_X), value 804
		 type 3 (EV_ABS), code 1 (ABS_Y), value 454
		 type 4 (EV_MSC), code 5 (MSC_TIMESTAMP), value 305300
		 -------------- SYN_REPORT ------------
		 type 3 (EV_ABS), code 53 (ABS_MT_POSITION_X), value 806
		 type 3 (EV_ABS), code 54 (ABS_MT_POSITION_Y), value 453
		 type 3 (EV_ABS), code 0 (ABS_X), value 806
		 type 3 (EV_ABS), code 1 (ABS_Y), value 453
		 type 4 (EV_MSC), code 5 (MSC_TIMESTAMP), value 312400
		 -------------- SYN_REPORT ------------
		 type 1 (EV_KEY), code 272 (BTN_LEFT), value 0
		 type 4 (EV_MSC), code 5 (MSC_TIMESTAMP), value 319500
		 -------------- SYN_REPORT ------------
		 type 4 (EV_MSC), code 5 (MSC_TIMESTAMP), value 326600
		 -------------- SYN_REPORT ------------
		 type 4 (EV_MSC), code 5 (MSC_TIMESTAMP), value 333700

		 -------------- SYN_REPORT ------------
		 type 3 (EV_ABS), code 57 (ABS_MT_TRACKING_ID), value -1
		 type 1 (EV_KEY), code 330 (BTN_TOUCH), value 0
		 type 1 (EV_KEY), code 325 (BTN_TOOL_FINGER), value 0
		 type 4 (EV_MSC), code 5 (MSC_TIMESTAMP), value 340800
		 -------------- SYN_REPORT ------------


https://android.googlesource.com/kernel/msm/+/android-msm-flo-3.4-kitkat-mr1/Documentation/input/event-codes.txt


INPUT_PROP_DIRECT + INPUT_PROP_POINTER:
--------------------------------------
The INPUT_PROP_DIRECT property indicates that device coordinates should be
directly mapped to screen coordinates (not taking into account trivial
transformations, such as scaling, flipping and rotating). Non-direct input
devices require non-trivial transformation, such as absolute to relative
transformation for touchpads. Typical direct input devices: touchscreens,
drawing tablets; non-direct devices: touchpads, mice.
The INPUT_PROP_POINTER property indicates that the device is not transposed
on the screen and thus requires use of an on-screen pointer to trace user's
movements.  Typical pointer devices: touchpads, tablets, mice; non-pointer
device: touchscreen.
If neither INPUT_PROP_DIRECT or INPUT_PROP_POINTER are set, the property is
considered undefined and the device type should be deduced in the
traditional way, using emitted event types.
INPUT_PROP_BUTTONPAD:
--------------------
For touchpads where the button is placed beneath the surface, such that
pressing down on the pad causes a button click, this property should be
set. Common in clickpad notebooks and macbooks from 2009 and onwards.
Originally, the buttonpad property was coded into the bcm5974 driver
version field under the name integrated button. For backwards
compatibility, both methods need to be checked in userspace.


Tablets:
----------
BTN_TOOL_<name> events must be reported when a stylus or other tool is active on
the tablet. ABS_{X,Y} must be reported with the location of the tool. BTN_TOUCH
should be used to report when the tool is in contact with the tablet.
BTN_{STYLUS,STYLUS2} should be used to report buttons on the tool itself. Any
button may be used for buttons on the tablet except BTN_{MOUSE,LEFT}.
BTN_{0,1,2,etc} are good generic codes for unlabeled buttons. Do not use
meaningful buttons, like BTN_FORWARD, unless the button is labeled for that
purpose on the device.
For new hardware, both INPUT_PROP_DIRECT and INPUT_PROP_POINTER should be set.


Note: Historically a touch device with BTN_TOOL_FINGER and BTN_TOUCH was
interpreted as a touchpad by userspace, while a similar device without
BTN_TOOL_FINGER was interpreted as a touchscreen. For backwards compatibility
with current userspace it is recommended to follow this distinction. In the
future, this distinction will be deprecated and the device properties ioctl
EVIOCGPROP, defined in linux/input.h, will be used to convey the device type.



----------- Значения, передаваемые планшетом:
	Стилус касается планшета:
		0xC1 - 	11000001
		0xC3 -	11000011
		0xC5 -	11000101